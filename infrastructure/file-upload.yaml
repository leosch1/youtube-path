AWSTemplateFormatVersion: '2010-09-09'
Description: Upload files to S3 via pre-signed URLs

Resources:
  UploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: youtube-path-watch-histories-611312332993-eu-central-1
  
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: YouTubePathFileUploadLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub 'arn:aws:s3:::${UploadBucket}/*'
  
  PreSignedUrlFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs20.x
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const s3 = new AWS.S3();
          exports.handler = async () => {
            const timestamp = new Date().getTime();
            const fileName = `watch-history-${timestamp}.json`;
            const s3Params = {
              Bucket: 'youtube-path-watch-histories-611312332993-eu-central-1',
              Key: fileName,
              Expires: 60,
              ContentType: 'application/json',
              ACL: 'private',
            };
            try {
              const preSignedUrl = await s3.getSignedUrlPromise('putObject', s3Params);
              return {
                statusCode: 200,
                headers: { "Access-Control-Allow-Origin": "*" },
                body: JSON.stringify({ uploadURL: preSignedUrl, fileName })
              };
            } catch (err) {
              return {
                statusCode: 500,
                body: JSON.stringify({ error: "Error creating pre-signed URL" })
              };
            }
          }
      FunctionName: PreSignedUrlFunction

  ApiGateway:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: PreSignedURLAPI
      Description: API Gateway to generate pre-signed URLs
      FailOnWarnings: 'true'
      EndpointConfiguration:
        Types:
          - REGIONAL
      Body:
        swagger: "2.0"
        info:
          title: "PreSignedURLService"
        paths:
          /generate-url:
            post:
              consumes:
                - application/json
              produces:
                - application/json
              parameters:
                - in: body
                  name: RequestBody
                  description: JSON object containing the information for generating a pre-signed URL
                  required: true
                  schema:
                    $ref: '#/definitions/GenerateUrlRequest'
              responses:
                '200':
                  description: "Successful response"
                  schema:
                    $ref: '#/definitions/GenerateUrlResponse'
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PreSignedUrlFunction.Arn}/invocations
        definitions:
          GenerateUrlRequest:
            type: object
            properties:
              fileType:
                type: string
                enum: [ "application/json" ]
            required:
              - fileType
          GenerateUrlResponse:
            type: object
            properties:
              uploadURL:
                type: string
              fileName:
                type: string


  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGateway
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod

  LambdaApiGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref PreSignedUrlFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*'
