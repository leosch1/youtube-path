AWSTemplateFormatVersion: '2010-09-09'
Description: Upload files to S3 via pre-signed URLs

Resources:
  UploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: youtube-path-watch-histories-611312332993-eu-central-1
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - "https://www.yourfrontenddomain.com"
              - "http://localhost:3000"
            AllowedMethods:
              - "PUT"
            AllowedHeaders:
              - "*"
            MaxAge: 3000

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: YouTubePathFileUploadLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub 'arn:aws:s3:::${UploadBucket}/*'
        - PolicyName: LambdaCloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/PreSignedUrlFunction:*'
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/PreSignedUrlFunction:*:log-stream:*'

  PreSignedUrlFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs20.x
      Code:
        ZipFile: |
          const { S3Client, PutObjectCommand } = require("@aws-sdk/client-s3");
          const { getSignedUrl } = require("@aws-sdk/s3-request-presigner");

          const s3Client = new S3Client({ region: "eu-central-1" });

          exports.handler = async () => {
            const timestamp = new Date().getTime();
            const fileName = `watch-history-${timestamp}.json`;
            
            const command = new PutObjectCommand({
              Bucket: 'youtube-path-watch-histories-611312332993-eu-central-1',
              Key: fileName,
              ContentType: 'application/json',
              ACL: 'private',
            });
            
            try {
              const preSignedUrl = await getSignedUrl(s3Client, command, { expiresIn: 3600 });
              return {
                statusCode: 200,
                headers: { 
                  "Access-Control-Allow-Origin": "https://www.yourfrontenddomain1.com, http://localhost:3000",
                  "Content-Type": "application/json"
                },
                body: JSON.stringify({ uploadURL: preSignedUrl, fileName })
              };
            } catch (err) {
              return {
                statusCode: 500,
                body: JSON.stringify({ error: "Error creating pre-signed URL" })
              };
            }
          };

      FunctionName: PreSignedUrlFunction

  ApiGateway:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: PreSignedURLAPI
      Description: API Gateway to generate pre-signed URLs
      FailOnWarnings: 'true'
      EndpointConfiguration:
        Types:
          - REGIONAL
      Body:
        swagger: "2.0"
        info:
          title: "PreSignedURLService"
        paths:
          /generate-url:
            post:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                '200':
                  description: "Successful response"
                  schema:
                    type: object
                    properties:
                      uploadURL:
                        type: string
                      fileName:
                        type: string
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PreSignedUrlFunction.Arn}/invocations
            options:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                '200':
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Origin,Accept'"
                      method.response.header.Access-Control-Allow-Origin: "'https://www.yourfrontenddomain.com'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGateway
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod

  LambdaApiGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref PreSignedUrlFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*'

  FileUploadApiDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: "Z0720910164XX8B5317OC" # hosted zone ID of schleo.com
      Name: youtube-path-file-upload.schleo.com
      Type: A
      TTL: '300'
      DependsOn: ApiGatewayDeployment
      ResourceRecords:
        - Fn::GetAtt:
            - ApiGateway
            - DomainName
